#ifndef stackq
#define stackq

#include<iostream>
#include"list.h"
using namespace std;
void Steck()
{
	char element;        
	List<char>*c = NULL;                     //Ñòåê.
	int i = 5;                               //Ïåðåìåííàÿ äëÿ âûáîðà òèïà äàííûõ.
	
	/*Âûáîð ðàáîòû, êîòîðà âûïîëíÿåòñÿ ñî ñòåêîì.
	 (Äîáàâëåíèå, Óäàëåíèå ýëåìåíòà)*/
	while (i != 0)
	{
		cout << "\nВведите номер функции.";
		cout << "\n1 - Добавить элемент в голову стэка";
		cout << "\n2 - Удалить элемент с головы\n 0 - Выход\n";
		/*Î÷èñòêà ëèøíåãî ââîäà.
		Èñïðàâëÿåò ïðîáëåìó ïåðåïîëíåíèÿ
		ââîäà ïðè ðàáîòå ñ char.*/
		cin.ignore(1000, '\n');
		cin >> i;
		switch (i)
		{
			/*Äàáàâëåíèå ýëåìåíòà â ãîëîâó ñòåêà.*/
		case 1:
		{
			cout << "Введите элемент\n"; 
			cin >> element;
			c = PushFront(c, element);    
			OutputList(c);
			break;
		}
		/*Óäàëåíèå ýëåìåíòà ñ ãîëîâû ñòåêà.*/
		case 2:
		{
			c = PopFront(c);
			cout << endl; 
			OutputList(c);
			break;
		}
		/*âûõîä*/
		case 0:
			break;
		default:
		{
			cout << "Такой функции не предусмотрено.";
			cout << "Повторите ввод.";
		}
		}
	}
}
/*Ïîäïðîãðàììà, êîòîðàÿ âûïîëíÿåò ðàáîòó íàä î÷åðåäüþ:
1) Äîáàâëåíèå ýëåìåíòà â õâîñò î÷åðåäè.
2) Óäàëåíèå ãîëîâíîãî ýëåìåíòà î÷åðåäè.*/
void Queue()
{
	char element;
	List<char>*c = NULL;
	int i = 5;                               //Ïåðåìåííàÿ äëÿ âûáîðà òèïà äàííûõ
	
	/*Âûáîð ðàáîòû, êîòîðà âûïîëíÿåòñÿ ñ î÷åðåäüþ.
	(Äîáàâëåíèå, Óäàëåíèå ýëåìåíòà)*/
	while (i != 3)
	{
		cout << "\nРабота с очередью";
		cout << "\n1 - Добавить в хвост\n"; 
		cout << "\n2 - Удалить с головы\n"; 
		cout << "3 - Выход\n";
		/*Î÷èñòêà ëèøíåãî ââîäà.
		Èñïðàâëÿåò ïðîáëåìó ïåðåïîëíåíèÿ
		ââîäà ïðè ðàáîòå ñ char.*/
		cin.ignore(1000, '\n');
		cin >> i;
		switch (i)
		{
			/*Äîáàâëåíèå ýëåìåíòà â õâîñò î÷åðåäè.*/
		case 1:
		{
			cout << "Добавляйте элемент\n";
			cin >> element;
			c = PushFront(c, element);
			OutputList(c);
			break;
		}
		/*Óäàëåíèå ãîëîâíîãî ýëåìåíòà î÷åðåäè.*/
		case 2:
		{
			c = Findend(c);    //Ïîèñê ãîëîâíîãî ýëåìåíòà.
			c = PopBack(c);    
			c = FindHead(c);
			cout << endl;
			OutputList(c);
			break;
		}
		/*âûõîä*/
		case 3:
			break;
		default:
		{
			cout << "Такой функции не предусмотрено.";
			cout << "Повторите ввод.";
		}
		}
	}
}

/*Ïîäïðîãðàììà, êîòîðàÿ âûïîëíÿåò ðàáîòó íàä äâóñòîðîííåé î÷åðåäüþ.:
1) Äîáàâëåíèå â íà÷àëî î÷åðåäè.
2) Äîáàâëåíèå â êîíåö î÷åðåäè.
3) Óäàëåíèå ñ íà÷àëà î÷åðåäè.
4) Óäàëåíèåñ êîíöà î÷åðåäè. */
void DEK()
{
	char element;
	List<char>*c = NULL;
	int i = 5;                               //Ïåðåìåííàÿ äëÿ âûáîðà òèïà äàííûõ
	
	 /*Âûáîð ðàáîòû, êîòîðà âûïîëíÿåòñÿ ñ  äâóñòîðîííåé î÷åðåäüþ.
	(Äîáàâëåíèå, Óäàëåíèå ýëåìåíòà)*/
	while (i != 0)
	{
		cout << "\nÂûáåðåòå äåéñòâèÿ, êîòîðûå áóäóò âûïîëíÿòüñÿ äëÿ äâóñòîðîííåé î÷åðåäè.";
		cout << "\n1 - Äîáàâëåíèå â íà÷àëî î÷åðåäè.";
		cout << "\n2 - Äîáàâëåíèå â êîíåö î÷åðåäè. ";
		cout << "\n3 - Óäàëåíèå ñ íà÷àëà î÷åðåäè.";
		cout << "\n4 - Óäàëåíèå ñ êîíöà î÷åðåäè. \n0 - Âûõîä\n";
		/*Î÷èñòêà ëèøíåãî ââîäà.
		Èñïðàâëÿåò ïðîáëåìó ïåðåïîëíåíèÿ
		ââîäà ïðè ðàáîòå ñ char.*/
		cin.ignore(1000, '\n');
		cin >> i;
		switch (i)

		{
			/*Äîáàâëåíèå â íà÷àëî î÷åðåäè.*/
		case 1:
		{
			cout << " Óêàæèòå ýëåìåíò, êîòîðûé íåîáõîäèìî äîáàâèòü.";
			cin >> element;
			c = PushFront(c, element);    //Äîáàâëåíèå ýëåìåíòà.
			OutputList(c);
			break;
		}
		/*Äîáàâëåíèå â êîíåö î÷åðåäè.*/
		case 2:
		{
			cout << " Óêàæèòå ýëåìåíò, êîòîðûé íåîáõîäèìî äîáàâèòü.";
			cin >> element;
			c = Findend(c);           //Ïîèñê ïîñëåäíåãî ýëåìåíòà î÷åðåäè.
			c = PushBack(c, element);  //Äîáàâëåíèå ýëåìåíòà.
			c = FindHead(c);
			OutputList(c);
			break;
		}
		/*Óäàëåíèå ñ íà÷àëà î÷åðåäè.*/
		case 3:
		{
			c = PopFront(c);      //Óäàëåíèå ýëåìåíòà.
			OutputList(c);
			break;
		}
		/*Óäàëåíèåñ êîíöà î÷åðåäè.*/
		case 4:
		{
			c = Findend(c);     //Ïîèñê ïîñëåäíåãî ýëåìåíòà î÷åðåäè.
			c = PopBack(c);      //Óäàëåíèå ýëåìåíòà.
			c = FindHead(c);
			OutputList(c);
			break;
		}
		/*âûõîä*/
		case 0:
			break;
		default:
		{
			cout << "Âûáðàííîå äåéñòâèå îòñóòñòâóåò.";
			cout << "Ïîâòîðèòå ââîä.";
		}
		}
	}
}

/*Âûáîð íàä ÷åì áóäåò ïðîèçâîäèòüñÿ ðàáîòà:
(Ñòåê, î÷åðåäü, äâóñòîðîííÿÿ î÷åðåäü)*/
void SteckQueue()
{
	int i = 5;
	while (i != 2)
	{
		cout<<"\n-----------\nРабота с очередью:\n";
		cout << "\n1 - Start\n2 - Выход\n";
		/*Î÷èñòêà ëèøíåãî ââîäà.
		Èñïðàâëÿåò ïðîáëåìó ïåðåïîëíåíèÿ
		ââîäà ïðè ðàáîòå ñ char.*/
		cin.ignore(1000, '\n');
		cin >> i;
		switch (i)

		{
			/*Ñòåê.*/
		case 1:
		{
			Queue();
			break;
		}
		/*Î÷åðåäü*/
		case 2:
		{
			break;
		/*Äâóñòîðîííÿÿ î÷åðåäü*/
		/*case 3:
		{
			DEK();
			break;
		}*/
		default:
		{
			cout << "Такой функции не предусмотрено.";
			cout << "Повторите ввод.";
		}
		}
	}
    }
 }
#endif
